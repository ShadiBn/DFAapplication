/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;


/**
 *
 * @author shadi
 */
public class Page2 extends javax.swing.JFrame {
    
    private Set<String> validInputs;
    private Set<String> finalStates;
    private String[] states;
    private String startingState;
    private Map<String, HashMap<String, String>> transitions;
    public DFA dfa2;
    /**
     * Creates new form DFA2
     */
    public Page2() {
        initComponents();
        validInputs = new HashSet<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        DFA2Tittle = new javax.swing.JLabel();
        BackButton = new javax.swing.JButton();
        ValidInputDFA2Label = new javax.swing.JLabel();
        ValidInputDFA2TextField = new javax.swing.JTextField();
        StatesDFA2Label = new javax.swing.JLabel();
        StatesDFA2TextField = new javax.swing.JTextField();
        StartingStateDFA2Label = new javax.swing.JLabel();
        StartingStateDFA2TextField = new javax.swing.JTextField();
        FinalStatesDFA2Label = new javax.swing.JLabel();
        FInalStatesDFA2TextField = new javax.swing.JTextField();
        CheckEquivalenceFinalButton = new javax.swing.JButton();
        TransitionsDFA2InputButton = new javax.swing.JButton();
        TranisitonsDFA2ShowScrollPanel = new javax.swing.JScrollPane();
        TranisitonShowList = new javax.swing.JList<>();
        BackgroundImage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(594, 400));
        setMinimumSize(new java.awt.Dimension(594, 400));
        setPreferredSize(new java.awt.Dimension(594, 400));
        setSize(new java.awt.Dimension(594, 400));
        getContentPane().setLayout(null);

        DFA2Tittle.setFont(new java.awt.Font("Segoe UI Historic", 1, 18)); // NOI18N
        DFA2Tittle.setForeground(new java.awt.Color(255, 255, 255));
        DFA2Tittle.setText("Enter DFA 2 Inputs");
        getContentPane().add(DFA2Tittle);
        DFA2Tittle.setBounds(190, 10, 160, 30);

        BackButton.setBackground(new java.awt.Color(249, 255, 98));
        BackButton.setText("Back");
        BackButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });
        getContentPane().add(BackButton);
        BackButton.setBounds(30, 20, 70, 20);

        ValidInputDFA2Label.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        ValidInputDFA2Label.setForeground(new java.awt.Color(255, 255, 255));
        ValidInputDFA2Label.setText("Valid Inputs");
        getContentPane().add(ValidInputDFA2Label);
        ValidInputDFA2Label.setBounds(30, 74, 90, 17);

        ValidInputDFA2TextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ValidInputDFA2TextFieldActionPerformed(evt);
            }
        });
        getContentPane().add(ValidInputDFA2TextField);
        ValidInputDFA2TextField.setBounds(250, 70, 40, 27);

        StatesDFA2Label.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        StatesDFA2Label.setForeground(new java.awt.Color(255, 255, 255));
        StatesDFA2Label.setText("All States(comma seperated)");
        getContentPane().add(StatesDFA2Label);
        StatesDFA2Label.setBounds(20, 124, 190, 17);

        StatesDFA2TextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StatesDFA2TextFieldActionPerformed(evt);
            }
        });
        getContentPane().add(StatesDFA2TextField);
        StatesDFA2TextField.setBounds(250, 120, 140, 27);

        StartingStateDFA2Label.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        StartingStateDFA2Label.setForeground(new java.awt.Color(255, 255, 255));
        StartingStateDFA2Label.setText("Enter Starting State");
        getContentPane().add(StartingStateDFA2Label);
        StartingStateDFA2Label.setBounds(20, 174, 170, 17);
        getContentPane().add(StartingStateDFA2TextField);
        StartingStateDFA2TextField.setBounds(250, 170, 40, 27);

        FinalStatesDFA2Label.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        FinalStatesDFA2Label.setForeground(new java.awt.Color(255, 255, 255));
        FinalStatesDFA2Label.setText("All Final States(comma seperated)");
        getContentPane().add(FinalStatesDFA2Label);
        FinalStatesDFA2Label.setBounds(20, 224, 220, 17);
        getContentPane().add(FInalStatesDFA2TextField);
        FInalStatesDFA2TextField.setBounds(250, 220, 140, 27);

        CheckEquivalenceFinalButton.setBackground(new java.awt.Color(249, 255, 98));
        CheckEquivalenceFinalButton.setText("Check Equivalence");
        CheckEquivalenceFinalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckEquivalenceFinalButtonActionPerformed(evt);
            }
        });
        getContentPane().add(CheckEquivalenceFinalButton);
        CheckEquivalenceFinalButton.setBounds(340, 280, 129, 23);

        TransitionsDFA2InputButton.setBackground(new java.awt.Color(249, 255, 98));
        TransitionsDFA2InputButton.setText("Click Here To Enter The DFA's Tranisitons");
        TransitionsDFA2InputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransitionsDFA2InputButtonActionPerformed(evt);
            }
        });
        getContentPane().add(TransitionsDFA2InputButton);
        TransitionsDFA2InputButton.setBounds(30, 280, 260, 23);

        TranisitonsDFA2ShowScrollPanel.setViewportView(TranisitonShowList);

        getContentPane().add(TranisitonsDFA2ShowScrollPanel);
        TranisitonsDFA2ShowScrollPanel.setBounds(410, 50, 129, 200);

        BackgroundImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1337527.png"))); // NOI18N
        BackgroundImage.setText("jLabel1");
        getContentPane().add(BackgroundImage);
        BackgroundImage.setBounds(-10, 0, 590, 360);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        
                              
    private void ValidInputDFA2TextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        // Now you have a Set<String> containing the valid inputs
        validInputs = new HashSet<>(Arrays.asList(ValidInputDFA2TextField.getText().split(",")));
    }

    private void StatesDFA2TextFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // TODO add your handling code here:
        states = StatesDFA2TextField.getText().split(",");
    }                                                   

    private void CheckEquivalenceFinalButtonActionPerformed(java.awt.event.ActionEvent evt) {       
        boolean result = DFA.areEquivalent(Home.dfa, dfa2);
        if (result) {
            JOptionPane.showMessageDialog(null, "DFA1 and DFA2 are equivalent");
        }
        else{
            JOptionPane.showMessageDialog(null, "DFA1 and DFA2 are not equivalent");    
        }
    }                                                           

    private void TransitionsDFA2InputButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                           
        // TODO add your handling code here:
        // Get valid inputs from the text field
        String validInputString = ValidInputDFA2TextField.getText();
        validInputs = new HashSet<>(Arrays.asList(validInputString.split(",")));
    
        // Get all states from the text field
        states = StatesDFA2TextField.getText().split(",");
    
        // Get starting state
        startingState = StartingStateDFA2TextField.getText();
    
        // Get final states
        finalStates = new HashSet<>(Arrays.asList(FInalStatesDFA2TextField.getText().split(",")));
    
        // Input for transitions
        transitions = new HashMap<>();
        for (String state : states) {
            HashMap<String, String> transition = new HashMap<>();
            for (String input : validInputs) {
                String nextState = JOptionPane.showInputDialog(String.format("Enter transition state for state '%s' with input '%s':", state, input));
                
                if (nextState==null) {
                    transition.clear();
                    break;
                }
                transition.put(input, nextState);
            }

            if (transition.isEmpty()) {
                transitions.clear();
                break;
            }
            transitions.put(state, transition);
        }
    
        // Create DFA
        dfa2 = new DFA(startingState, finalStates, (HashMap<String, HashMap<String, String>>) transitions);
        
        if (!transitions.isEmpty()) {
            String message = "Initial transitions";
            // Display transitions in the list (assuming you have a displayTransitions method)
            displayTransitions(message);
        }
                           
    }                                                          

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        new Home().setVisible(true);
        setVisible(false);
    }                                          

    /**
     * @param args the command line arguments
     */

    private void displayTransitions(String message) {
        DefaultListModel<String> model = new DefaultListModel<>();
        model.addElement(message);
        for (Map.Entry<String, HashMap<String, String>> entry : transitions.entrySet()) {
            StringBuilder sb = new StringBuilder();
            sb.append(entry.getKey()).append(": ");
            for (Map.Entry<String, String> transition : entry.getValue().entrySet()) {
                sb.append(String.format("(%s, %s) ", transition.getKey(), transition.getValue()));
            }
            model.addElement(sb.toString());
        }
        TranisitonShowList.setModel(model);
    }


    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Page2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Page2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Page2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Page2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Page2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton BackButton;
    private javax.swing.JLabel BackgroundImage;
    private javax.swing.JButton CheckEquivalenceFinalButton;
    private javax.swing.JLabel DFA2Tittle;
    private javax.swing.JTextField FInalStatesDFA2TextField;
    private javax.swing.JLabel FinalStatesDFA2Label;
    private javax.swing.JLabel StartingStateDFA2Label;
    private javax.swing.JTextField StartingStateDFA2TextField;
    private javax.swing.JLabel StatesDFA2Label;
    private javax.swing.JTextField StatesDFA2TextField;
    private javax.swing.JList<String> TranisitonShowList;
    private javax.swing.JScrollPane TranisitonsDFA2ShowScrollPanel;
    private javax.swing.JButton TransitionsDFA2InputButton;
    private javax.swing.JLabel ValidInputDFA2Label;
    private javax.swing.JTextField ValidInputDFA2TextField;
    // End of variables declaration                   
}
